// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortdomainClient is the client API for Portdomain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortdomainClient interface {
	// Add / update a port in the database
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertResponse, error)
	// Get returns all ports from the database
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type portdomainClient struct {
	cc grpc.ClientConnInterface
}

func NewPortdomainClient(cc grpc.ClientConnInterface) PortdomainClient {
	return &portdomainClient{cc}
}

func (c *portdomainClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertResponse, error) {
	out := new(UpsertResponse)
	err := c.cc.Invoke(ctx, "/client.portdomain/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portdomainClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/client.portdomain/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortdomainServer is the server API for Portdomain service.
// All implementations must embed UnimplementedPortdomainServer
// for forward compatibility
type PortdomainServer interface {
	// Add / update a port in the database
	Upsert(context.Context, *UpsertRequest) (*UpsertResponse, error)
	// Get returns all ports from the database
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedPortdomainServer()
}

// UnimplementedPortdomainServer must be embedded to have forward compatible implementations.
type UnimplementedPortdomainServer struct {
}

func (UnimplementedPortdomainServer) Upsert(context.Context, *UpsertRequest) (*UpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedPortdomainServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPortdomainServer) mustEmbedUnimplementedPortdomainServer() {}

// UnsafePortdomainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortdomainServer will
// result in compilation errors.
type UnsafePortdomainServer interface {
	mustEmbedUnimplementedPortdomainServer()
}

func RegisterPortdomainServer(s grpc.ServiceRegistrar, srv PortdomainServer) {
	s.RegisterService(&Portdomain_ServiceDesc, srv)
}

func _Portdomain_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortdomainServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.portdomain/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortdomainServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portdomain_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortdomainServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.portdomain/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortdomainServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Portdomain_ServiceDesc is the grpc.ServiceDesc for Portdomain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Portdomain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client.portdomain",
	HandlerType: (*PortdomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _Portdomain_Upsert_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Portdomain_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/portdomain.proto",
}
